% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/requirements.R
\name{requirements}
\alias{requirements}
\alias{read_requirements}
\alias{available_requirements_table}
\title{Get available and latest data requirements files}
\usage{
read_requirements(
  path = ".",
  pattern = "req",
  sheet = "specs",
  date_format = c("ymd", "mdy", "dmy"),
  subset = NULL,
  variable_name_col = "variable_name",
  variable_label_col = "variable_label",
  decode_col = "format_decode",
  ...
)

available_requirements_table(
  path = ".",
  pattern = "req",
  sheet = "specs",
  date_format = c("ymd", "mdy", "dmy"),
  drop_qc = TRUE
)
}
\arguments{
\item{path}{a single directory path or the path to an Excel data requirements
file. For \code{read_requirements}, providing a directory path will result
in the latest Excel data requirements file being selected, while providing
a file path will result in that file being selected. Defaults to the
working directory.}

\item{pattern}{\code{character} string containing a regular expression. Only
file names which match the regular expression will be returned. Defaults to
\code{"req"}.}

\item{sheet}{either a \code{character} vector of required Excel sheet
name(s), the \code{numeric} index of the sheet position, or NULL (for no
required sheet names). Only one sheet name or index should be provided to
\code{read_requirements}. Defaults to \code{"specs"}.}

\item{date_format}{\code{character} indicating the format of the date.
Defaults to the year-month-day format \code{"ymd"}.}

\item{subset}{an expression that returns a logical value and is defined in
the terms of the imported requirements table (like
\code{\link[dplyr]{filter}}). If the expression results in an error, that
error is reported as a warning and the subset is not applied. An example is
\code{subset = pk_ard == "x"}, which indicates to subset to variables
marked for inclusion in the PK Analysis Ready Dataset.}

\item{variable_name_col, variable_label_col, decode_col}{\code{character}
column names in the data requirements that describe the variable names,
their labels, and their decodes.}

\item{...}{optional arguments passed to \code{\link[openxlsx]{read.xlsx}}}

\item{drop_qc}{\code{logical} indicating whether to remove versions of the
data requirements that are used for QC. These are identified by patterns of
"qc" or "marked" in the filename.}
}
\description{
This family of functions allows the user to explore, import, and
  leverage the contents of data requirements files.

\describe{
  \item{\code{read_requirements}}{Read the latest data requirements file.}
  \item{\code{available_requirements_table}}{Get available data requirements
  files. Returns a \code{tibble} including available data requirements paths
  and other information.}
}
}
\examples{
\dontrun{
# read the latest requirements file in the working directory, based on Cognigen defaults
reqs <- read_requirements()

# specify a particular file and sheet
reqs <- read_requirements(path = "requirements.xlsx", sheet = 1)

# get all available requirements files
available_requirements_table()

# only include requirements with a specs sheet
available_requirements_table(sheet = "specs")

# include QC versions
available_requirements_table(drop_qc = FALSE)
}

}
